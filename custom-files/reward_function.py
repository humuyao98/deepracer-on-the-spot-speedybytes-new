def reward_function(params):
    def dist_2_points(x1, x2, y1, y2):
        return abs(abs(x1-x2)**2 + abs(y1-y2)**2)**0.5

    def dist_to_racing_line(closest_coords, second_closest_coords, car_coords):

        # Calculate the distances between 2 closest racing points
        a = abs(dist_2_points(x1=closest_coords[0],
                              x2=second_closest_coords[0],
                              y1=closest_coords[1],
                              y2=second_closest_coords[1]))

        # Distances between car and closest and second closest racing point
        b = abs(dist_2_points(x1=car_coords[0],
                              x2=closest_coords[0],
                              y1=car_coords[1],
                              y2=closest_coords[1]))
        c = abs(dist_2_points(x1=car_coords[0],
                              x2=second_closest_coords[0],
                              y1=car_coords[1],
                              y2=second_closest_coords[1]))

        # Calculate distance between car and racing line (goes through 2 closest racing points)
        # try-except in case a=0 (rare bug in DeepRacer)
        try:
            distance = abs(-(a**4) + 2*(a**2)*(b**2) + 2*(a**2)*(c**2) -
                           (b**4) + 2*(b**2)*(c**2) - (c**4))**0.5 / (2*a)
        except:
            distance = b

        return distance

    def closest_2_racing_points_index(racing_coords, car_coords):
        # Calculate all distances to racing points
        distances = []
        for i in range(len(racing_coords)):
            distance = dist_2_points(x1=racing_coords[i][0], x2=car_coords[0],
                                     y1=racing_coords[i][1], y2=car_coords[1])
            distances.append(distance)

        # Get index of the closest racing point
        closest_index = distances.index(min(distances))

        # Get index of the second closest racing point
        distances_no_closest = distances.copy()
        distances_no_closest[closest_index] = 999
        second_closest_index = distances_no_closest.index(
            min(distances_no_closest))

        return [closest_index, second_closest_index]

    racing_track = [[-0.20724, -5.3598, 4.0, 0.06747],
                    [-0.47778, -5.36767, 4.0, 0.06766],
                    [-0.74932, -5.37422, 4.0, 0.0679],
                    [-1.02203, -5.37964, 4.0, 0.06819],
                    [-1.29601, -5.38412, 4.0, 0.0685],
                    [-1.57122, -5.38786, 4.0, 0.06881],
                    [-1.8474, -5.39112, 4.0, 0.06905],
                    [-2.12429, -5.39407, 4.0, 0.06923],
                    [-2.40187, -5.39675, 4.0, 0.0694],
                    [-2.68034, -5.39917, 4.0, 0.06962],
                    [-2.95965, -5.40137, 3.53767, 0.07896],
                    [-3.24017, -5.40331, 3.02145, 0.09284],
                    [-3.52371, -5.40475, 2.64495, 0.1072],
                    [-3.82523, -5.40512, 2.34687, 0.12848],
                    [-4.12405, -5.3999, 2.10334, 0.14209],
                    [-4.4167, -5.38337, 1.90497, 0.15387],
                    [-4.69945, -5.35081, 1.75292, 0.16237],
                    [-4.96833, -5.29858, 1.33458, 0.20524],
                    [-5.21913, -5.22415, 1.33458, 0.19603],
                    [-5.44748, -5.12614, 1.33458, 0.1862],
                    [-5.64894, -5.00442, 1.33458, 0.17637],
                    [-5.81916, -4.86014, 1.33458, 0.1672],
                    [-5.95432, -4.69587, 1.33458, 0.1594],
                    [-6.03141, -4.51083, 1.44765, 0.13847],
                    [-6.06171, -4.31865, 1.52091, 0.12792],
                    [-6.05139, -4.12578, 1.52091, 0.12699],
                    [-6.00451, -3.93643, 1.52091, 0.12825],
                    [-5.91556, -3.75647, 1.68122, 0.1194],
                    [-5.79061, -3.58937, 1.83424, 0.11375],
                    [-5.63354, -3.43754, 1.99726, 0.10938],
                    [-5.44754, -3.3029, 2.17819, 0.10541],
                    [-5.23575, -3.18686, 2.39088, 0.10101],
                    [-5.00162, -3.09009, 2.67616, 0.09467],
                    [-4.74927, -3.01183, 3.01445, 0.08765],
                    [-4.48258, -2.9505, 3.40711, 0.08032],
                    [-4.20489, -2.90407, 3.8859, 0.07245],
                    [-3.91905, -2.87015, 4.0, 0.07196],
                    [-3.62735, -2.84634, 4.0, 0.07317],
                    [-3.33166, -2.83018, 4.0, 0.07403],
                    [-3.03317, -2.81991, 4.0, 0.07467],
                    [-2.73294, -2.81365, 4.0, 0.07507],
                    [-2.43178, -2.80973, 4.0, 0.0753],
                    [-2.13028, -2.80671, 4.0, 0.07538],
                    [-1.82877, -2.80369, 4.0, 0.07538],
                    [-1.52727, -2.80067, 4.0, 0.07538],
                    [-1.22592, -2.79733, 4.0, 0.07534],
                    [-0.92528, -2.79249, 4.0, 0.07517],
                    [-0.626, -2.78486, 3.7727, 0.07935],
                    [-0.32888, -2.77294, 3.36622, 0.08834],
                    [-0.03478, -2.75526, 3.01394, 0.09776],
                    [0.25529, -2.73021, 2.69691, 0.10796],
                    [0.54017, -2.69612, 2.35965, 0.12159],
                    [0.81858, -2.65131, 2.07007, 0.13622],
                    [1.08896, -2.59392, 1.76615, 0.1565],
                    [1.34938, -2.52185, 1.76615, 0.15299],
                    [1.59753, -2.43292, 1.76615, 0.14925],
                    [1.83057, -2.32477, 1.76615, 0.14547],
                    [2.04406, -2.19403, 1.76615, 0.14174],
                    [2.23196, -2.03725, 1.76615, 0.13856],
                    [2.38305, -1.84996, 1.93408, 0.12442],
                    [2.50139, -1.64166, 2.07553, 0.11543],
                    [2.58957, -1.41832, 2.23796, 0.10729],
                    [2.65039, -1.18469, 2.37877, 0.10149],
                    [2.68589, -0.94425, 2.50036, 0.0972],
                    [2.69766, -0.69977, 2.40049, 0.10196],
                    [2.68754, -0.45352, 2.40049, 0.10267],
                    [2.65758, -0.20732, 2.40049, 0.10332],
                    [2.6077, 0.03723, 2.40049, 0.10397],
                    [2.537, 0.27813, 2.40049, 0.10459],
                    [2.44366, 0.51249, 2.40049, 0.10509],
                    [2.32494, 0.73531, 2.38579, 0.10583],
                    [2.18817, 0.94662, 2.18459, 0.11522],
                    [2.0357, 1.14533, 1.93485, 0.12945],
                    [1.8688, 1.3297, 1.71341, 0.14514],
                    [1.68848, 1.49748, 1.50627, 0.16352],
                    [1.496, 1.64647, 1.50627, 0.16159],
                    [1.29179, 1.7721, 1.50627, 0.15918],
                    [1.0772, 1.86942, 1.50627, 0.15643],
                    [0.85416, 1.93073, 1.50627, 0.15357],
                    [0.62634, 1.94678, 1.50627, 0.15162],
                    [0.40002, 1.90434, 1.82855, 0.12593],
                    [0.17858, 1.82052, 2.19183, 0.10802],
                    [-0.03804, 1.70538, 2.7323, 0.08979],
                    [-0.25104, 1.56799, 3.90233, 0.06495],
                    [-0.46211, 1.41881, 4.0, 0.06462],
                    [-0.69685, 1.26522, 4.0, 0.07013],
                    [-0.93605, 1.11947, 4.0, 0.07003],
                    [-1.17863, 0.98093, 4.0, 0.06984],
                    [-1.42379, 0.84882, 4.0, 0.06962],
                    [-1.67105, 0.72251, 4.0, 0.06941],
                    [-1.92015, 0.60181, 4.0, 0.0692],
                    [-2.17093, 0.48674, 4.0, 0.06898],
                    [-2.42325, 0.37734, 4.0, 0.06875],
                    [-2.67716, 0.27447, 4.0, 0.06849],
                    [-2.93266, 0.17914, 3.86251, 0.0706],
                    [-3.18935, 0.09043, 3.48674, 0.07789],
                    [-3.44712, 0.00887, 3.1839, 0.08492],
                    [-3.70583, -0.06497, 2.79379, 0.0963],
                    [-3.96528, -0.13024, 2.48062, 0.10785],
                    [-4.22521, -0.1855, 2.19278, 0.12119],
                    [-4.48519, -0.22871, 1.93332, 0.13632],
                    [-4.74443, -0.25741, 1.67775, 0.15546],
                    [-5.00174, -0.26919, 1.48641, 0.17329],
                    [-5.255, -0.25984, 1.3, 0.19495],
                    [-5.50091, -0.22523, 1.3, 0.19103],
                    [-5.73444, -0.16095, 1.3, 0.18632],
                    [-5.94829, -0.06288, 1.3, 0.18097],
                    [-6.13129, 0.07278, 1.3, 0.17523],
                    [-6.26968, 0.2454, 1.3, 0.17019],
                    [-6.34319, 0.44782, 1.50207, 0.14337],
                    [-6.3662, 0.65953, 1.68414, 0.12645],
                    [-6.34875, 0.87247, 1.84885, 0.11556],
                    [-6.29714, 1.08269, 2.00519, 0.10795],
                    [-6.21567, 1.28785, 2.20033, 0.10032],
                    [-6.10845, 1.48671, 2.27253, 0.09941],
                    [-5.97604, 1.67759, 2.27314, 0.1022],
                    [-5.81721, 1.85796, 2.52895, 0.09503],
                    [-5.63603, 2.02758, 2.84585, 0.08721],
                    [-5.43636, 2.18705, 3.24497, 0.07875],
                    [-5.22186, 2.33757, 3.82227, 0.06856],
                    [-4.99627, 2.48096, 4.0, 0.06682],
                    [-4.76347, 2.61949, 4.0, 0.06773],
                    [-4.52703, 2.75551, 4.0, 0.06819],
                    [-4.27692, 2.90272, 4.0, 0.07256],
                    [-4.0279, 3.05188, 4.0, 0.07257],
                    [-3.77967, 3.20244, 4.0, 0.07258],
                    [-3.53196, 3.3539, 4.0, 0.07259],
                    [-3.28449, 3.50581, 4.0, 0.07259],
                    [-3.03875, 3.65535, 4.0, 0.07192],
                    [-2.79347, 3.80258, 4.0, 0.07152],
                    [-2.5485, 3.94662, 4.0, 0.07105],
                    [-2.30352, 4.08669, 3.8371, 0.07354],
                    [-2.05818, 4.222, 3.36698, 0.08321],
                    [-1.81207, 4.35163, 2.97438, 0.09352],
                    [-1.56472, 4.4745, 2.97438, 0.09285],
                    [-1.31562, 4.58928, 2.97438, 0.09221],
                    [-1.06419, 4.69434, 2.97438, 0.09161],
                    [-0.80962, 4.78704, 2.97438, 0.09109],
                    [-0.55095, 4.86396, 2.97438, 0.09073],
                    [-0.28704, 4.92077, 3.71565, 0.07265],
                    [-0.01972, 4.96462, 4.0, 0.06772],
                    [0.25049, 4.99782, 4.0, 0.06806],
                    [0.52321, 5.02231, 4.0, 0.06845],
                    [0.79807, 5.03991, 4.0, 0.06886],
                    [1.07485, 5.05196, 4.0, 0.06926],
                    [1.35338, 5.05964, 4.0, 0.06966],
                    [1.63363, 5.06383, 4.0, 0.07007],
                    [1.91558, 5.06543, 4.0, 0.07049],
                    [2.1974, 5.06488, 3.66464, 0.0769],
                    [2.47558, 5.06181, 3.27604, 0.08492],
                    [2.74945, 5.05426, 2.92312, 0.09373],
                    [3.0187, 5.04039, 2.61682, 0.10303],
                    [3.28296, 5.01844, 2.33987, 0.11332],
                    [3.54166, 4.98663, 2.04241, 0.12762],
                    [3.79403, 4.94306, 1.79214, 0.1429],
                    [4.03892, 4.88557, 1.79214, 0.14036],
                    [4.27468, 4.81154, 1.79214, 0.13789],
                    [4.49916, 4.71805, 1.79214, 0.13569],
                    [4.7093, 4.60159, 1.79214, 0.13406],
                    [4.89962, 4.45652, 1.79214, 0.13353],
                    [5.06109, 4.27615, 2.07747, 0.11653],
                    [5.19795, 4.07042, 2.29852, 0.1075],
                    [5.31217, 3.84411, 2.56025, 0.09901],
                    [5.40601, 3.60105, 2.9075, 0.08961],
                    [5.48236, 3.34483, 3.2856, 0.08137],
                    [5.54378, 3.07814, 3.835, 0.07136],
                    [5.59343, 2.80367, 4.0, 0.06973],
                    [5.63465, 2.52387, 4.0, 0.0707],
                    [5.67005, 2.2405, 4.0, 0.07139],
                    [5.70311, 1.94978, 4.0, 0.07315],
                    [5.73914, 1.65779, 4.0, 0.07355],
                    [5.77769, 1.36547, 4.0, 0.07371],
                    [5.81841, 1.07321, 4.0, 0.07377],
                    [5.86106, 0.78118, 4.0, 0.07378],
                    [5.9055, 0.48946, 4.0, 0.07377],
                    [5.95165, 0.19811, 4.0, 0.07374],
                    [5.99942, -0.09283, 4.0, 0.07371],
                    [6.0489, -0.38331, 4.0, 0.07367],
                    [6.1002, -0.67327, 3.5942, 0.08193],
                    [6.15348, -0.96263, 3.02469, 0.09727],
                    [6.20906, -1.25127, 2.58497, 0.11371],
                    [6.26368, -1.52057, 2.26316, 0.12142],
                    [6.31347, -1.78842, 1.77942, 0.1531],
                    [6.3535, -2.05371, 1.77942, 0.15078],
                    [6.37923, -2.31591, 1.77942, 0.14806],
                    [6.38591, -2.57442, 1.77942, 0.14532],
                    [6.36787, -2.82789, 1.77942, 0.14281],
                    [6.3191, -3.07411, 1.77942, 0.14106],
                    [6.22272, -3.30493, 1.98762, 0.12584],
                    [6.08985, -3.51874, 2.20031, 0.11441],
                    [5.92838, -3.71519, 2.42503, 0.10486],
                    [5.74428, -3.89479, 2.65305, 0.09694],
                    [5.54202, -4.05844, 2.88595, 0.09015],
                    [5.32501, -4.2072, 3.12338, 0.08424],
                    [5.09596, -4.34219, 3.36672, 0.07897],
                    [4.85705, -4.46447, 3.66707, 0.07319],
                    [4.6103, -4.5754, 3.90617, 0.06926],
                    [4.35711, -4.67582, 4.0, 0.06809],
                    [4.09869, -4.76647, 4.0, 0.06846],
                    [3.8361, -4.84801, 4.0, 0.06874],
                    [3.57029, -4.92107, 4.0, 0.06892],
                    [3.30211, -4.98625, 4.0, 0.069],
                    [3.0323, -5.04412, 4.0, 0.06899],
                    [2.76152, -5.09526, 4.0, 0.06889],
                    [2.4903, -5.14024, 4.0, 0.06873],
                    [2.21908, -5.17961, 4.0, 0.06852],
                    [1.94815, -5.21388, 4.0, 0.06827],
                    [1.67769, -5.24357, 4.0, 0.06802],
                    [1.40777, -5.26917, 4.0, 0.06778],
                    [1.13836, -5.29112, 4.0, 0.06757],
                    [0.86934, -5.30985, 4.0, 0.06742],
                    [0.60053, -5.32567, 4.0, 0.06732],
                    [0.33166, -5.33905, 4.0, 0.0673],
                    [0.06248, -5.35032, 4.0, 0.06735]]

    all_wheels_on_track = params['all_wheels_on_track']
    x = params['x']
    y = params['y']
    distance_from_center = params['distance_from_center']
    is_left_of_center = params['is_left_of_center']
    heading = params['heading']
    progress = params['progress']
    steps = params['steps']
    speed = params['speed']
    steering_angle = params['steering_angle']
    track_width = params['track_width']
    waypoints = params['waypoints']
    closest_waypoints = params['closest_waypoints']
    is_offtrack = params['is_offtrack']


    ## Define the default reward ##
    reward = 1e-3

    # Get closest indexes for racing line (and distances to all points on racing line)
    closest_index, second_closest_index = closest_2_racing_points_index(
        racing_track, [x, y])

    # Get optimal [x, y, speed, time] for closest and second closest index
    optimals = racing_track[closest_index]
    optimals_second = racing_track[second_closest_index]

    ## Reward if car goes close to optimal racing line ##
    DISTANCE_MULTIPLE = 1
    dist = dist_to_racing_line(optimals[0:2], optimals_second[0:2], [x, y])
    distance_reward = max(1e-3, 1 - (dist/(track_width*0.5)))
    reward += distance_reward * DISTANCE_MULTIPLE

    ## Reward if speed is close to optimal speed ##
    SPEED_DIFF_NO_REWARD = 1
    SPEED_MULTIPLE = 2
    speed_diff = abs(optimals[2]-speed)
    if speed_diff <= SPEED_DIFF_NO_REWARD:
        # we use quadratic punishment (not linear) bc we're not as confident with the optimal speed
        # so, we do not punish small deviations from optimal speed
        speed_reward = (1 - (speed_diff/(SPEED_DIFF_NO_REWARD))**2)**2
    else:
        speed_reward = 0
    reward += speed_reward * SPEED_MULTIPLE

    # Zero reward of obviously too slow
    speed_diff_zero = optimals[2]-speed
    if speed_diff_zero > 0.5:
        reward = 1e-3

    if progress == 100:
        reward += 1.0

    if all_wheels_on_track == False:
        reward = 1e-3

    step_reward = (progress/steps)
    reward += step_reward

    return float(reward)